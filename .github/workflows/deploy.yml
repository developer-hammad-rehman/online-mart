name: Deploy to Azure Container Apps

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        run: |
          echo ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin

      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/openapi-merge:latest ./openapi-merge-spec
          
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/openapi-merge:latest

          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/user-service:latest ./user-service
          
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/user-service:latest

          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/order-service:latest ./order-service
          
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/order-service:latest

          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/product-service:latest ./product-service
          
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/product-service:latest

          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/notification-service:latest ./notification-services
          
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/notification-service:latest

          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/inventory-service:latest ./inventory-service
          
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/inventory-service:latest

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure Container Apps
        run: |
          az containerapp create \
            --name user-service \
            --resource-group azure-env \
            --environment azure-env \
            --image ${{ secrets.DOCKER_HUB_USERNAME }}/user-service:latest \
            --target-port 8081 \
            --ingress 'external' \
            --env-vars 'APP_SETTING=my-setting'

          az containerapp create \
            --name order-service \
            --resource-group azure-env \
            --environment azure-env \
            --image ${{ secrets.DOCKER_HUB_USERNAME }}/order-service:latest \
            --target-port 8084 \
            --ingress 'external' \
            --env-vars 'APP_SETTING=my-setting'

          az containerapp create \
            --name product-service \
            --resource-group azure-env \
            --environment azure-env \
            --image ${{ secrets.DOCKER_HUB_USERNAME }}/product-service:latest \
            --target-port 8083 \
            --ingress 'external' \
            --env-vars 'APP_SETTING=my-setting'

          az containerapp create \
            --name notification-service \
            --resource-group azure-env \
            --environment azure-env \
            --image ${{ secrets.DOCKER_HUB_USERNAME }}/notification-service:latest \
            --target-port 8086 \
            --ingress 'external' \
            --env-vars 'APP_SETTING=my-setting'

          az containerapp create \
            --name inventory-service \
            --resource-group azure-env \
            --environment azure-env \
            --image ${{ secrets.DOCKER_HUB_USERNAME }}/inventory-service:latest \
            --target-port 8082 \
            --ingress 'external' \
            --env-vars 'APP_SETTING=my-setting'

          
          az containerapp create \
            --name openapi-merge \
            --resource-group azure-env \
            --environment azure-env \
            --image ${{ secrets.DOCKER_HUB_USERNAME }}/openapi-merge:latest \
            --target-port 8000 \
            --ingress 'external' \
            --env-vars 'APP_SETTING=my-setting'